name: Market Analysis 15m

on:
  workflow_dispatch:
    inputs:
      symbols:
        description: "Kommagetrennte Symbole (z.B. EURUSD=X,GBPUSD=X)"
        required: false
        default: "EURUSD=X"
      tz:
        description: "Zeitzone (IANA, z.B. Europe/Berlin)"
        required: false
        default: "Europe/Berlin"
      send_testmail:
        description: "Nur Debug: zusätzliche Testmail ohne Analyse senden?"
        type: boolean
        required: false
        default: false
  schedule:
    - cron: "*/15 * * * *"   # alle 15 Minuten

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Runner-Sicherheit (falls requirements.txt mal schlanker ist):
          pip install python-dotenv pyyaml

      # --- Secrets kurz prüfen (ohne Inhalte zu leaken) ---
      - name: Debug mail env (masked)
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_TO:  ${{ secrets.EMAIL_TO }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          python - <<'PY'
          import os
          def mask(s):
              return s if not s else (s[:2] + "***" + s[-2:])
          print("[env] EMAIL_TO   =", mask(os.getenv("EMAIL_TO")))
          print("[env] SMTP_USER  =", mask(os.getenv("SMTP_USER")))
          print("[env] SMTP_PASS? =", "JA" if os.getenv("SMTP_PASS") else "NEIN")
          print("[env] HOST/PORT  =", os.getenv("SMTP_HOST"), os.getenv("SMTP_PORT"))
          PY

      # --- Optionale Testmail NUR auf Knopfdruck (workflow_dispatch) ---
      - name: Send test mail (optional)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.send_testmail == 'true' }}
        continue-on-error: true
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_TO:  ${{ secrets.EMAIL_TO }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          if [ -f send_testmail.py ]; then
            python send_testmail.py
          else
            echo "[skip] send_testmail.py nicht gefunden – überspringe Testmail."
          fi

      # --- Agent ausführen (immer) ---
      - name: Run agent
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          EMAIL_TO:  ${{ secrets.EMAIL_TO }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          # Defaults für Cron (da es dort keine inputs gibt)
          SYM="${{ github.event.inputs.symbols || 'EURUSD=X' }}"
          TZV="${{ github.event.inputs.tz || 'Europe/Berlin' }}"
          echo "[run] symbols=$SYM tz=$TZV"
          python agent.py --symbols "$SYM" --tz "$TZV" --email

      # (Optional) Charts als Artefakt anhängen – hilfreich fürs Debugging
      - name: Upload charts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: charts
          path: reports/out/*.png
          if-no-files-found: ignore
